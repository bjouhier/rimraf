/*** Generated by streamline 0.1.35 - DO NOT EDIT ***/

var __global = typeof global !== 'undefined' ? global : window;
function __cb(_, fn){ var ctx = __global.__context; return function(err, result){ __global.__context = ctx; if (err) return _(err); try { return fn(null, result); } catch (ex) { return __propagate(_, ex); } } }
function __future(fn, args, i){ var done, err, result; var cb = function(e, r){ done = true; err = e, result = r; }; args = Array.prototype.slice.call(args); args[i] = function(e, r){ cb(e, r); }; fn.apply(this, args); return function(_){ if (done) _.call(this, err, result); else cb = _.bind(this); } .bind(this); }
function __nt(_, fn){ var i = 0; var cb = __cb(_, fn); var safeCb = function(){ try { cb(); } catch (ex) { __propagate(cb, ex); } }; if (typeof process != "undefined" && typeof process.nextTick == "function") return function(){ if (++i % 20 == 0) process.nextTick(safeCb); else cb(); }; else return function(){ if (++i % 20 == 0) setTimeout(safeCb); else cb(); }; }
function __propagate(_, err){ try { _(err); } catch (ex) { __trap(ex); } }
function __trap(err){ if (err) { if (__global.__context && __global.__context.errorHandler) __global.__context.errorHandler(err); else console.error("UNCAUGHT EXCEPTION: " + err.message + "\n" + err.stack); } }
function __tryCatch(_, fn){ try { fn(); } catch (e) { try { _(e); } catch (ex) { __trap(ex); } } }
/*     1 */ var path = require("path"), fs = require("fs");
/*     5 */ var timeout = 0;
/*     6 */ var rimraf = module.exports = function __1(p, opts, wait) {
              if (!wait) {
                return __future(__1, arguments, 2);
              }
            ;
              var busyTries, stat, g, er, rimrafs, i;
/*     7 */   opts = (opts || {
              });
/*     8 */   opts.maxBusyTries = (opts.maxBusyTries || 3);
/*     9 */   busyTries = 0;
              return (function(__break) {
                var __loop = __nt(wait, function() {
/*    11 */       var __6 = true;
                  if (__6) {
                    return (function(__then) {
                      (function(wait) {
                        __tryCatch(wait, function() {
/*    13 */               return fs.lstat(p, __cb(wait, function(__0, __2) {
                            stat = __2;
                            return (function(wait) {
/*    15 */                   var __1 = (g = opts.gently);
                              if (!__1) {
                                return wait(null, __1);
                              }
                            ;
                              return (function(wait) {
/*    16 */                     var __2 = stat.isSymbolicLink();
                                return (function(__then) {
                                  if (__2) {
/*    16 */                         return fs.readlink(p, __cb(wait, function(__0, __4) {
/*    16 */                           var __3 = path.dirname(__4);
                                      return wait(null, __3);
                                    }));
                                  }
                                   else {
                                    __then();
                                  }
                                ;
                                })(function() {
/*    16 */                       return wait(null, p);
                                });
                              })(__cb(wait, function(__0, __4) {
/*    16 */                     var __3 = (path.resolve(__4).indexOf(g) !== 0);
                                return wait(null, __3);
                              }));
                            })(__cb(wait, function(__0, __3) {
                              return (function(__then) {
                                if (__3) {
/*    17 */                       er = new Error(((("Refusing to delete: " + p) + " not in ") + g));
/*    18 */                       er.errno = require("constants").EEXIST;
/*    19 */                       er.code = "EEXIST";
/*    20 */                       er.path = p;
/*    21 */                       return wait(er);
                                }
                                 else {
                                  __then();
                                }
                              ;
                              })(function() {
                                return (function(__then) {
/*    23 */                       if (!stat.isDirectory()) {
/*    23 */                         return fs.unlink(p, __cb(wait, function(__0, __4) {
                                      return wait(null, __4);
                                    }));
                                  }
                                   else {
                                    __then();
                                  }
                                ;
                                })(function() {
/*    24 */                       return fs.readdir(p, __cb(wait, function(__0, __5) {
/*    24 */                         rimrafs = __5.map(function(file) {
/*    25 */                           return rimraf(path.join(p, file), opts);
                                    });
/*    27 */                         i = 0;
                                    var __12 = false;
                                    return (function(__break) {
                                      var __loop = __nt(wait, function() {
                                        if (__12) {
/*    27 */                               i++;
                                        }
                                         else {
                                          __12 = true;
                                        }
                                      ;
/*    27 */                             var __11 = (i < rimrafs.length);
                                        if (__11) {
/*    28 */                               return rimrafs[i](__cb(wait, __loop));
                                        }
                                         else {
                                          __break();
                                        }
                                      ;
                                      });
                                      __loop();
                                    })(function() {
/*    29 */                           return fs.rmdir(p, __cb(wait, function() {
/*    30 */                             timeout = 0;
                                        return wait(null);
                                      }));
                                    });
                                  }));
                                });
                              });
                            }));
                          }));
                        });
                      })(function(ex, __result) {
                        __tryCatch(wait, function() {
                          if (ex) {
                            return (function(__then) {
/*    33 */                   if (ex.message.match(/^EMFILE/)) {
/*    34 */                     return setTimeout(__cb(wait, __then), timeout += 10);
                              }
                               else {
                                return (function(__then) {
/*    35 */                       if ((ex.message.match(/^EBUSY/) && (busyTries < opt.maxBusyTries))) {
/*    36 */                         return setTimeout(__cb(wait, __then), (++busyTries * 100));
                                  }
                                   else {
/*    37 */                         if (ex.message.match(/^ENOENT/)) {
                                      return wait(null);
                                    }
/*    39 */                          else {
/*    40 */                           return wait(ex);
                                    }
                                  ;
                                    __then();
                                  }
                                ;
                                })(__then);
                              }
                            ;
                            })(__then);
                          }
                           else {
                            wait(null, __result);
                          }
                        ;
                        });
                      });
                    })(function() {
                      __tryCatch(wait, __loop);
                    });
                  }
                   else {
                    __break();
                  }
                ;
                });
                __loop();
              })(function() {
                wait();
              });
            };
